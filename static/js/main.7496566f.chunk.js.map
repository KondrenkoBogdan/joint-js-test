{"version":3,"sources":["App.jsx","serviceWorker.ts","index.jsx"],"names":["graph","joint","Graph","paper","Paper","el","document","getElementById","model","width","gridSize","drawGrid","background","color","commandManager","CommandManager","HTML","standard","Rectangle","position","resize","attr","body","fill","rx","label","text","addTo","CSS","linkHTMLtoCSS","Link","source","target","vertices","x","y","appendLabel","attrs","connector","line","sourceMarker","targetMarker","stroke","strokeWidth","strokeDasharray","link3","size","App","useState","procent","setProcent","input","React","createRef","scale","onClick","undo","redo","ref","type","min","max","step","onInput","current","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"okBAIIA,EAAQ,IAAIC,MAAUC,MAEtBC,EAAQ,IAAIF,MAAUG,MAAM,CAC5BC,GAAIC,SAASC,eAAe,YAC5BC,MAAOR,EACPS,MAAO,IACPC,SAAU,GACVC,UAAU,EACVC,WAAY,CACRC,MAAO,oBAIXC,EAAiB,IAAIb,MAAUc,eAAe,CAAEf,MAAOA,IAGvDgB,EAAO,IAAIf,SAAagB,SAASC,UACrCF,EAAKG,SAAS,IAAK,IACnBH,EAAKI,OAAO,IAAK,KACjBJ,EAAKK,KAAK,CACNC,KAAM,CACFC,KAAM,aACNC,GAAI,IAERC,MAAO,CACHC,KAAM,aACNH,KAAM,WAGdP,EAAKW,MAAM3B,GAEX,IAAI4B,EAAM,IAAI3B,SAAagB,SAASC,UACpCU,EAAIT,SAAS,IAAK,KAClBS,EAAIR,OAAO,IAAK,IAChBQ,EAAIP,KAAK,CACLC,KAAM,CACFC,KAAM,cACNC,GAAI,IAERC,MAAO,CACHC,KAAM,YACNH,KAAM,WAGdK,EAAID,MAAM3B,GAEV,IAAI6B,EAAgB,IAAI5B,SAAagB,SAASa,KAC9CD,EAAcE,OAAOf,GACrBa,EAAcG,OAAOJ,GACrBC,EAAcI,SAAS,CACnB,CAAEC,EAAG,IAAKC,EAAG,KACb,CAAED,EAAG,IAAKC,EAAG,KACb,CAAED,EAAG,IAAKC,EAAG,OAEjBN,EAAcO,YAAY,CACtBC,MAAO,CACHX,KAAM,CACFA,KAAM,kBAIlBG,EAAcS,UAAU,WACxBT,EAAcR,KAAK,CACfkB,KAAK,CACDC,aAAc,CACV,KAAQ,OACR,OAAU,MACV,eAAgB,EAChB,KAAQ,QAEZC,aAAc,CACV,KAAQ,OACR,OAAU,OACV,eAAgB,EAChB,KAAQ,OAEZC,OAAQ,OACRC,YAAa,EACbC,gBAAiB,UAGzBf,EAAcF,MAAM3B,GAEpB,IAAI6C,EAAQ,IAAI5C,SAAagB,SAASa,KACtCe,EAAMd,OAAOf,GACb6B,EAAMb,OAAOJ,GACbiB,EAAMZ,SAAS,CACX,CAAEC,EAAG,IAAKC,EAAG,OAEjBU,EAAMP,UAAU,WAAY,CAAEQ,KAAM,IACpCD,EAAMlB,MAAM3B,GAoBG+C,MAlBf,WAAgB,IAAD,EAIiBC,mBAAS,KAJ1B,mBAINC,EAJM,KAIGC,EAJH,KAMPC,EAAQC,IAAMC,YAIpB,OAFElD,EAAMmD,MAAML,EAAQ,KAEd,oCACJ,4BAAQM,QAAS,WAAOzC,EAAe0C,SAAvC,QACA,4BAAQD,QAAS,WAAOzC,EAAe2C,SAAvC,QAFI,MAGD,2BAAOC,IAAKP,EAAOQ,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMC,KAAK,KAAKC,QAAS,WAAOb,EAAWC,EAAMa,QAAQC,UAHrG,eAIIhB,IClGMiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnE,SAASC,eAAe,SDiIpB,kBAAmBmE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7496566f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport * as joint from \"rappid\"\n\nvar graph = new joint.dia.Graph;\n\nvar paper = new joint.dia.Paper({\n    el: document.getElementById('myholder'),\n    model: graph,\n    width: 1000,\n    gridSize: 10,\n    drawGrid: true,\n    background: {\n        color: 'rgb(0, 255, 0)'\n    }\n});\n\nvar commandManager = new joint.dia.CommandManager({ graph: graph });\n\n\nvar HTML = new joint.shapes.standard.Rectangle();\nHTML.position(400, 10);\nHTML.resize(100, 100);\nHTML.attr({\n    body: {\n        fill: \"lightblue \",\n        rx: 50\n    },\n    label: {\n        text: 'Learn HTML',\n        fill: 'Black'\n    }\n});\nHTML.addTo(graph);\n\nvar CSS = new joint.shapes.standard.Rectangle();\nCSS.position(400, 330);\nCSS.resize(100, 70);\nCSS.attr({\n    body: {\n        fill: \"transparent\",\n        rx: 50\n    },\n    label: {\n        text: 'Learn CSS',\n        fill: 'Black'\n    }\n});\nCSS.addTo(graph);\n\nvar linkHTMLtoCSS = new joint.shapes.standard.Link();\nlinkHTMLtoCSS.source(HTML);\nlinkHTMLtoCSS.target(CSS);\nlinkHTMLtoCSS.vertices([\n    { x: 250, y: 100 },\n    { x: 350, y: 200 },\n    { x: 250, y: 300 }\n]);\nlinkHTMLtoCSS.appendLabel({\n    attrs: {\n        text: {\n            text: 'LabelOnLine'\n        }\n    }\n});\nlinkHTMLtoCSS.connector('rounded');\nlinkHTMLtoCSS.attr({\n    line:{\n        sourceMarker: {\n            'type': 'path',\n            'stroke': 'red',\n            'stroke-width': 2,\n            'fill': 'blue'\n        },\n        targetMarker: {\n            'type': 'path',\n            'stroke': 'blue',\n            'stroke-width': 2,\n            'fill': 'red'\n        },\n        stroke: \"blue\",\n        strokeWidth: 2,\n        strokeDasharray: '15 2',\n    }\n});\nlinkHTMLtoCSS.addTo(graph);\n\nvar link3 = new joint.shapes.standard.Link();\nlink3.source(HTML);\nlink3.target(CSS);\nlink3.vertices([\n    { x: 250, y: 200 }\n]);\nlink3.connector('jumpover', { size: 5 });\nlink3.addTo(graph);\n\nfunction App() {\n\n\n\n    let [procent, setProcent] = useState(100)\n\n    let input = React.createRef();\n\n    paper.scale(procent/100);\n\n  return (<>\n      <button onClick={() => {commandManager.undo();}}>UNDO</button>\n      <button onClick={() => {commandManager.redo();}}>REDO</button>\n      10%<input ref={input} type=\"range\" min=\"10\" max=\"300\" step=\"10\" onInput={() => {setProcent(input.current.value)}}/>300%\n      current{procent}\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}